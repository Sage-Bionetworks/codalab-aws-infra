AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
  TagKey:
    Type: String
    Description: "Key of a tag that will be used to mark target deployment EC2 instances"
  TagValue:
    Type: String
    Description: "Value of a tag that will be used to mark target deployment EC2 instances"
  SSLCertificateIdArn:
    Type: String
    Description: "SSL certificate Arn"
  CodeDeployEC2RoleInstanceProfile:
    Type: String
    Description: "Code Deploy EC2 Role"
  SslPolicy:
    Type: String
    Default: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
    AllowedValues:
      - "ELBSecurityPolicy-TLS-1-2-2017-01"
      - "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      - "ELBSecurityPolicy-FS-2018-06"
  AppPort:
    Description: The port that the application runs on
    Type: Number
    MinValue: 1
    MaxValue: 65535
    Default: 443
    ConstraintDescription: A port number in the range 1 to 65535
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC Id for the ELB
  Subnets:
    Description: List of subnets for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Scheme:
    Description: Load balancer interface scheme
    Type: String
    AllowedValues:
      - "internet-facing"
      - "internal"
    Default: internet-facing
Resources:

# # EC2 related resurces
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue 'us-east-1-sandcastlevpc-VPCId'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  CodalabInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-04b9e92b5572fa0d1
      InstanceType: t3.xlarge
      Monitoring: True
      DisableApiTermination: False
      IamInstanceProfile: !Ref CodeDeployEC2RoleInstanceProfile
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 200
          Encrypted: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install CodeDeploy agent, Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo apt update -y;
              sudo apt install docker -y;
              sudo apt install git -y;
              sudo service docker start;
              sudo usermod -a -G docker ubuntu;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;
              cd ~
              mkdir src
              cd src
              git clone https://github.com/codalab/codalab-competitions.git
              cd ~/src/codalab-competitions
              mkdir var && sudo chown ubuntu:ubuntu -R var
              mkdir /tmp/codalab && sudo chown ubuntu:ubuntu -R /tmp/codalab
              sudo chmod 777 /tmp/codalab
              cp .env_sample .env
              docker-compose up -d

  #Load balancer
  Ec2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Ec2SecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !GetAtt ElbSecurityGroup.GroupId
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ElbSecurityGroup
      GroupDescription: ELB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref PHCCPEC2Instance
          Port: !Ref AppPort
      VpcId: !Ref VpcId
      Port: !Ref AppPort
      Protocol: HTTPS
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PHCCPEC2Instance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PHCCPEC2Instance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  ElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward

  CodaLabServiceUser:
    Type: 'AWS::IAM::User'
  CodaLabServiceUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref PhccpServiceUser
Outputs:

  CodaLabServiceUserSecretAccessKey:
    Value: !GetAtt CodaLabServiceUserAccessKey.SecretAccessKey
    Description: Secret access key of codalab service user
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CodaLabServiceUserSecretAccessKey'
  CodaLabServiceUserAccessKeyId:
    Value: !Ref CodaLabServiceUserAccessKey
    Description: Access key id of phccp service user
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PhccpSerCodaLabServiceUserAccessKeyIdviceUserAccessKeyId'
  LoadBalancerName:
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerName'
  LoadBalancerArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerArn'
  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerDnsName'
  ElbTargetGroupFullName:
    Value: !GetAtt ElbTargetGroup.TargetGroupFullName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupFullName'
  ElbTargetGroupName:
    Value: !GetAtt ElbTargetGroup.TargetGroupName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupName'
  ElbTargetGroupArn:
    Value: !Ref ElbTargetGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupArn'