AWSTemplateFormatVersion: 2010-09-09
# Conditions:
#   IsSandbox: !Equals [!Ref "AWS::AccountId", "563295687221"]
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
Mappings:
  AdminRoleArns:
    "563295687221":
      Arn: "arn:aws:iam::563295687221:role/accounts-AWSIAMAdminRole-1B5HUQPC19H69"
    "055273631518":
      Arn: "arn:aws:iam::055273631518:role/accounts-AWSIAMAdminRole-JL0BF315YDU0"
Resources:

  CodalabEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy'
      Path: /

  CodalabS3User:
    Type: 'AWS::IAM::User'

  CodalabPrivateS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  CodalabPublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowCodeDeployFromEC2Role
            Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt: [ CodalabEC2Role, Arn ]
            Action:
              - s3:Get*
              - s3:List*
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodalabPublicS3Bucket
                - /*
          - Sid: AllowPutFromDeployUser
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CodalabS3User.Arn
            Action:
              - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodalabPublicS3Bucket
                - /*
      Bucket: !Ref CodalabPublicS3Bucket

      PrivateBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: MyPolicy
            Version: 2012-10-17
            Statement:
              - Sid: AllowCodeDeployFromEC2Role
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::GetAtt: [ CodalabEC2Role, Arn ]
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref CodalabPrivateS3Bucket
                    - /*
              - Sid: AllowPutFromDeployUser
                Effect: Allow
                Principal:
                  AWS:
                    - !GetAtt PhccpS3User.Arn
                Action:
                  - s3:PutObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref CodalabPrivateS3Bucket
                    - /*
          Bucket: !Ref CodalabPrivateS3Bucket

  CodalabEC2RoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref CodalabEC2Role
Outputs:
  CodaLabPrivateS3Bucket:
    Value: !Ref CodaLabPrivateS3Bucket
    Description: Name of private S3 bucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CodaLabPrivateS3Bucket'
  CodaLabPublicS3Bucket:
    Value: !Ref CodaLabPublicS3Bucket
    Description: Name of public S3 bucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CodaLabPublicS3Bucket'
  CodalabEC2RoleInstanceProfile:
    Value: !Ref CodalabEC2RoleInstanceProfile
    Description: Codalab ec2 role instance profile